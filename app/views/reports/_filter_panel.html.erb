<style>
.filter-rows {
  display: flex !important;
  flex-direction: column !important;
  gap: 20px !important;
}

.filter-row {
  display: grid !important;
  grid-template-columns: repeat(2, 1fr) !important;
  gap: 30px !important;
}

.filter-field {
  display: flex !important;
  flex-direction: column !important;
}

@media (max-width: 768px) {
  .filter-row {
    grid-template-columns: 1fr !important;
    gap: 15px !important;
  }
}
</style>

<div id="redmine-issue-summary-filter-panel" class="filter-panel">
  <h3><%= l(:label_redmine_issue_summary_filter, :scope => [:redmine_issue_summary_filter]) %></h3>
  
  <%= form_tag(project_issues_report_path(project), method: :get, id: 'redmine-issue-filter-form') do %>
    <div class="filter-container">
      <div class="filter-rows">
        <div class="filter-row">
          <div class="filter-field">
            <%= label_tag 'filter[status_id][]', l(:field_status) %>
            <%= select_tag 'filter[status_id][]', 
                options_for_select([['すべて', '']] + project.rolled_up_statuses.sorted.map { |status| [status.name, status.id] }, 
                params[:filter] && params[:filter][:status_id] ? params[:filter][:status_id] : []),
                { multiple: true, class: 'filter-select filter-multi-select' } %>
          </div>
          
          <div class="filter-field">
            <%= label_tag 'filter[priority_id][]', l(:field_priority) %>
            <%= select_tag 'filter[priority_id][]', 
                options_for_select([['すべて', '']] + IssuePriority.active.map { |priority| [priority.name, priority.id] }, 
                params[:filter] && params[:filter][:priority_id] ? params[:filter][:priority_id] : []),
                { multiple: true, class: 'filter-select filter-multi-select' } %>
          </div>
        </div>
        
        <div class="filter-row">
          <div class="filter-field">
            <%= label_tag 'filter[assigned_to_id][]', l(:field_assigned_to) %>
            <%= select_tag 'filter[assigned_to_id][]', 
                options_for_select([['すべて', '']] + project.assignable_users.map { |user| [user.name, user.id] }, 
                params[:filter] && params[:filter][:assigned_to_id] ? params[:filter][:assigned_to_id] : []),
                { multiple: true, class: 'filter-select filter-multi-select' } %>
          </div>
          
          <div class="filter-field">
            <%= label_tag 'filter[tracker_id][]', l(:field_tracker) %>
            <%= select_tag 'filter[tracker_id][]', 
                options_for_select([['すべて', '']] + project.rolled_up_trackers.map { |tracker| [tracker.name, tracker.id] }, 
                params[:filter] && params[:filter][:tracker_id] ? params[:filter][:tracker_id] : []),
                { multiple: true, class: 'filter-select filter-multi-select' } %>
          </div>
        </div>
        
        <div class="filter-row">
          <div class="filter-field">
            <%= label_tag 'filter[category_id][]', l(:field_category) %>
            <%= select_tag 'filter[category_id][]', 
                options_for_select([['すべて', '']] + project.issue_categories.map { |category| [category.name, category.id] }, 
                params[:filter] && params[:filter][:category_id] ? params[:filter][:category_id] : []),
                { multiple: true, class: 'filter-select filter-multi-select' } %>
          </div>
          
          <div class="filter-field">
            <%= label_tag 'filter[fixed_version_id][]', l(:field_version) %>
            <%= select_tag 'filter[fixed_version_id][]', 
                options_for_select([['すべて', '']] + project.shared_versions.map { |version| [version.name, version.id] }, 
                params[:filter] && params[:filter][:fixed_version_id] ? params[:filter][:fixed_version_id] : []),
                { multiple: true, class: 'filter-select filter-multi-select' } %>
          </div>
        </div>
      </div>
      
      <div class="filter-actions">
        <button type="button" class="icon icon-apply-filter" onclick="applyRedmineIssueFilter()">
          <span class="icon-text">🔍</span>
          <%= l(:button_apply_filter, :scope => [:redmine_issue_summary_filter]) %>
        </button>
        
        <button type="button" class="icon icon-clear-filter" onclick="clearRedmineIssueFilter()">
          <span class="icon-text">🗑️</span>
          <%= l(:button_clear_filter, :scope => [:redmine_issue_summary_filter]) %>
        </button>
        
        <button type="button" class="icon icon-reset-filter" onclick="resetRedmineIssueFilter()">
          <span class="icon-text">🔄</span>
          リセット
        </button>
        
        <button type="button" class="icon icon-save-filter" onclick="saveRedmineIssueFilter()">
          <span class="icon-text">💾</span>
          保存
        </button>
        
        <button type="button" class="icon icon-load-filter" onclick="loadRedmineIssueFilter()">
          <span class="icon-text">📁</span>
          読み込み
        </button>
      </div>
    </div>
  <% end %>
</div>

<script>
function applyRedmineIssueFilter() {
  const form = document.getElementById('redmine-issue-filter-form');
  if (!form) return;
  
  const formData = new FormData(form);
  const params = new URLSearchParams();
  
  // フィルターパラメータを収集（複数選択対応）
  for (let [key, value] of formData.entries()) {
    if (value && value !== '') {
      params.append(key, value);
    }
  }
  
  // ページをリロードしてフィルターを適用
  window.location.href = form.action + '?' + params.toString();
}

function clearRedmineIssueFilter() {
  // すべての選択をクリア
  const selects = document.querySelectorAll('.filter-multi-select');
  selects.forEach(select => {
    select.selectedIndex = -1;
  });
  
  // フィルターを適用（空の状態で）
  applyRedmineIssueFilter();
}

function resetRedmineIssueFilter() {
  // すべての選択をリセット
  const selects = document.querySelectorAll('.filter-multi-select');
  selects.forEach(select => {
    select.selectedIndex = 0; // 最初の「すべて」を選択
  });
  
  // フィルターを適用
  applyRedmineIssueFilter();
}

function saveRedmineIssueFilter() {
  const filterData = {};
  const selects = document.querySelectorAll('.filter-multi-select');
  
  selects.forEach(select => {
    const fieldName = select.name.replace('filter[', '').replace('][]', '');
    const selectedValues = Array.from(select.selectedOptions).map(option => option.value).filter(v => v !== '');
    if (selectedValues.length > 0) {
      filterData[fieldName] = selectedValues;
    }
  });
  
  // ローカルストレージに保存
  localStorage.setItem('redmine_issue_filter_' + '<%= project.id %>', JSON.stringify(filterData));
  
  // 成功メッセージ
  alert('フィルター設定を保存しました');
}

function loadRedmineIssueFilter() {
  const savedData = localStorage.getItem('redmine_issue_filter_' + '<%= project.id %>');
  if (!savedData) {
    alert('保存されたフィルター設定がありません');
    return;
  }
  
  try {
    const filterData = JSON.parse(savedData);
    const selects = document.querySelectorAll('.filter-multi-select');
    
    selects.forEach(select => {
      const fieldName = select.name.replace('filter[', '').replace('][]', '');
      if (filterData[fieldName]) {
        // 保存された値を選択
        Array.from(select.options).forEach(option => {
          option.selected = filterData[fieldName].includes(option.value);
        });
      }
    });
    
    alert('フィルター設定を読み込みました');
  } catch (e) {
    alert('フィルター設定の読み込みに失敗しました');
  }
}
</script>